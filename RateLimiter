using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RateLimiter
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("API Rate limiter");

            // 10 requests per 10 seconds is the threshold
            RequestCache requestCache = new RequestCache(10, 10);

            //Assume that 1234 is client browser ip address or some browser specific attribute
            //This way we can know that the request is coming from same person or different
            Client request = new Client(1234, DateTime.Now);

            requestCache.rateLimit(request);

        }
    }

    public class RequestCache
    {
        int timeThreshold = 0;
        int requestThreshold = 0;

        Dictionary<Client, int> map;
        public RequestCache(int timeThreshold, int requestThreshold)
        {
            this.timeThreshold = timeThreshold;
            this.requestThreshold = requestThreshold;
            this.map = new Dictionary<Client, int>();
        }
        public void add(Client incomingRequest)
        {
            this.map.Add(incomingRequest, 1);
        }

        public void update(Client searchedRequest)
        {
            this.map[searchedRequest]++;
        }

        public void reset(Client searchedRequest, Client incomingRequest)
        {
            this.map.Remove(searchedRequest);
            this.add(incomingRequest);
        }

        public void rateLimit(Client incomingRequest)
        {
            Client searchedRequest = this.map.Keys.Where(item => item.id == incomingRequest.id).FirstOrDefault();
            
            if(searchedRequest != null)
            {
                if((incomingRequest.requestTime - searchedRequest.requestTime).Seconds < this.timeThreshold)
                {
                    if(this.map[searchedRequest] < this.requestThreshold)
                    {
                       this.update(searchedRequest); 
                    }
                }
                else
                {
                    this.reset(searchedRequest, incomingRequest);
                }
            }
            else
            {
                this.add(incomingRequest);
            }

        }
    }

    public class Client
    {
        public int id {get; set;}
        public DateTime requestTime {get; set;}
        public Client(int id, DateTime time)
        {
            this.id = id;
            this.requestTime = time;
        }
    }
}
